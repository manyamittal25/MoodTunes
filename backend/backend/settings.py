"""
Django settings for EmotionBasedMusicApp project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from datetime import timedelta, datetime
from pathlib import Path
from decouple import config

# MongoDB connection settings
MONGODB_SETTINGS = {
    'db': 'moodify',
    'host': config('MONGO_DB_URI', default='mongodb://localhost:27017/moodify'),
    'alias': 'default',
    'serverSelectionTimeoutMS': 30000,
    'connectTimeoutMS': 20000,
    'socketTimeoutMS': 20000,
    'maxPoolSize': 50,
    'retryWrites': True,
    'tlsAllowInvalidCertificates': True
}

# MongoDB connection is now handled with better error checking
MONGODB_AVAILABLE = False
try:
    from mongoengine import connect, disconnect
    from pymongo.errors import ServerSelectionTimeoutError, ConnectionFailure
    from pymongo import MongoClient
    
    print("[MongoDB Debug] Attempting to connect to MongoDB...")
    
    # Disconnect any existing connections first
    disconnect()
    
    # Connect using pymongo first to ensure database and collections exist
    client = MongoClient(
        MONGODB_SETTINGS['host'],
        serverSelectionTimeoutMS=MONGODB_SETTINGS['serverSelectionTimeoutMS'],
        connectTimeoutMS=MONGODB_SETTINGS['connectTimeoutMS'],
        socketTimeoutMS=MONGODB_SETTINGS['socketTimeoutMS'],
        maxPoolSize=MONGODB_SETTINGS['maxPoolSize'],
        retryWrites=MONGODB_SETTINGS['retryWrites'],
        tlsAllowInvalidCertificates=MONGODB_SETTINGS['tlsAllowInvalidCertificates']
    )
    
    # Test the connection
    client.admin.command('ping')
    print("[MongoDB Debug] Initial connection test successful")
    
    mongodb = client[MONGODB_SETTINGS['db']]
    
    # Initialize collections if they don't exist
    if 'user_profiles' not in mongodb.list_collection_names():
        mongodb.create_collection('user_profiles')
        mongodb.user_profiles.create_index('username', unique=True)
        print("[MongoDB Debug] Created user_profiles collection with indexes")
    
    # Connect using mongoengine
    connection = connect(**MONGODB_SETTINGS)
    
    # Verify the connection
    connection.server_info()
    print("[MongoDB Debug] MongoDB connected successfully")
    
    # Get database reference and verify collections
    db = connection.get_database(MONGODB_SETTINGS['db'])
    collections = db.list_collection_names()
    print(f"[MongoDB Debug] Available collections: {collections}")
    
    MONGODB_AVAILABLE = True

except (ServerSelectionTimeoutError, ConnectionFailure) as e:
    print(f"[MongoDB Debug] Connection Error: {str(e)}")
    print("[MongoDB Debug] Please check your MongoDB connection:")
    print("1. Verify MONGO_DB_URI in your environment variables")
    print("2. Check if MongoDB server is running")
    print("3. Verify network connectivity")
    print("4. Check MongoDB Atlas network access settings")
    print("5. Verify IP whitelist settings")
except Exception as e:
    print(f"[MongoDB Debug] Unexpected error: {str(e)}")
    print("Please check the MongoDB configuration and try again.")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

SECRET_KEY = config('SECRET_KEY')

DEBUG = True  # Set to True for development

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_mongoengine',
    'corsheaders',
    'drf_yasg',
    'dj_rest_auth',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django.contrib.sites',
]

SITE_ID = 1

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = 'backend.urls'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

CORS_ALLOW_CREDENTIALS = True

# Allow specific HTTP methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Allow specific headers in requests
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Expose specific headers in responses
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Cache settings (optional)
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
}

# Swagger settings for API documentation
SWAGGER_SETTINGS = {
    'USE_SESSION_AUTH': False,
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'Enter your token in the format: Bearer {your_token}'
        }
    },
    'DEFAULT_API_KEY': 'Token ',
    'APIS_SORTER': 'alpha',
    'OPERATIONS_SORTER': 'alpha',
    'SHOW_REQUEST_HEADERS': True,
    'DEFAULT_API_URL': 'https://moodify-emotion-music-app.onrender.com',
}

# JWT settings - Token lifetime = 7 days for access token and 14 days for refresh token
# This is to ensure the user's continuous access to the API and convenience
# You can change the token lifetime as per your requirements
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': config('SECRET_KEY', default='your-secret-key'),
    'VERIFYING_KEY': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'username',
    'USER_ID_CLAIM': 'username',
}

# AllAuth settings
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_AUTHENTICATION_METHOD = 'username'
ACCOUNT_EMAIL_REQUIRED = False

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Create static directory if it doesn't exist
os.makedirs(os.path.join(BASE_DIR, 'static'), exist_ok=True)

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'